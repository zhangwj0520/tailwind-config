{"version":3,"sources":["../src/index.ts","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon/defaults.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon/transformations.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon/merge.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon-set/tree.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon-set/get-icon.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/svg/html.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/svg/size.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/svg/url.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/css/common.mjs","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/css/icons.mjs","../src/loader.ts","../../../node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/icon/name.mjs","../src/names.ts","../src/clean.ts","../src/dynamic.ts"],"names":[],"mappings":"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","sourcesContent":["import plugin from 'tailwindcss/plugin';\nimport { getCSSRulesForIcons } from './clean';\nimport { getDynamicCSSRules } from './dynamic';\nimport type { CleanIconifyPluginOptions, DynamicIconifyPluginOptions } from './options';\n\n/**\n * Generate styles for dynamic selector: class=\"icon-[mdi-light--home]\"\n */\nexport function addDynamicIconSelectors(options?: DynamicIconifyPluginOptions) {\n  const prefix = options?.prefix || 'icon';\n  return plugin(({ matchComponents }) => {\n    matchComponents({\n      [prefix]: (icon: string) => getDynamicCSSRules(icon, options),\n    });\n  });\n}\n\n/**\n * Generate styles for preset list of icons\n */\nexport function addCleanIconSelectors(icons: string[] | string, options?: CleanIconifyPluginOptions) {\n  const rules = getCSSRulesForIcons(icons, options);\n  return plugin(({ addUtilities }) => {\n    addUtilities(rules);\n  });\n}\n\n/**\n * Export types\n */\nexport type { CleanIconifyPluginOptions, DynamicIconifyPluginOptions };\n","const defaultIconDimensions = Object.freeze(\n  {\n    left: 0,\n    top: 0,\n    width: 16,\n    height: 16\n  }\n);\nconst defaultIconTransformations = Object.freeze({\n  rotate: 0,\n  vFlip: false,\n  hFlip: false\n});\nconst defaultIconProps = Object.freeze({\n  ...defaultIconDimensions,\n  ...defaultIconTransformations\n});\nconst defaultExtendedIconProps = Object.freeze({\n  ...defaultIconProps,\n  body: \"\",\n  hidden: false\n});\n\nexport { defaultExtendedIconProps, defaultIconDimensions, defaultIconProps, defaultIconTransformations };\n","function mergeIconTransformations(obj1, obj2) {\n  const result = {};\n  if (!obj1.hFlip !== !obj2.hFlip) {\n    result.hFlip = true;\n  }\n  if (!obj1.vFlip !== !obj2.vFlip) {\n    result.vFlip = true;\n  }\n  const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;\n  if (rotate) {\n    result.rotate = rotate;\n  }\n  return result;\n}\n\nexport { mergeIconTransformations };\n","import { defaultExtendedIconProps, defaultIconTransformations } from './defaults.mjs';\nimport { mergeIconTransformations } from './transformations.mjs';\n\nfunction mergeIconData(parent, child) {\n  const result = mergeIconTransformations(parent, child);\n  for (const key in defaultExtendedIconProps) {\n    if (key in defaultIconTransformations) {\n      if (key in parent && !(key in result)) {\n        result[key] = defaultIconTransformations[key];\n      }\n    } else if (key in child) {\n      result[key] = child[key];\n    } else if (key in parent) {\n      result[key] = parent[key];\n    }\n  }\n  return result;\n}\n\nexport { mergeIconData };\n","function getIconsTree(data, names) {\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  const resolved = /* @__PURE__ */ Object.create(null);\n  function resolve(name) {\n    if (icons[name]) {\n      return resolved[name] = [];\n    }\n    if (!(name in resolved)) {\n      resolved[name] = null;\n      const parent = aliases[name] && aliases[name].parent;\n      const value = parent && resolve(parent);\n      if (value) {\n        resolved[name] = [parent].concat(value);\n      }\n    }\n    return resolved[name];\n  }\n  (names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);\n  return resolved;\n}\n\nexport { getIconsTree };\n","import { mergeIconData } from '../icon/merge.mjs';\nimport { getIconsTree } from './tree.mjs';\nimport '../icon/defaults.mjs';\nimport '../icon/transformations.mjs';\n\nfunction internalGetIconData(data, name, tree) {\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  let currentProps = {};\n  function parse(name2) {\n    currentProps = mergeIconData(\n      icons[name2] || aliases[name2],\n      currentProps\n    );\n  }\n  parse(name);\n  tree.forEach(parse);\n  return mergeIconData(data, currentProps);\n}\nfunction getIconData(data, name) {\n  if (data.icons[name]) {\n    return internalGetIconData(data, name, []);\n  }\n  const tree = getIconsTree(data, [name])[name];\n  return tree ? internalGetIconData(data, name, tree) : null;\n}\n\nexport { getIconData, internalGetIconData };\n","function iconToHTML(body, attributes) {\n  let renderAttribsHTML = body.indexOf(\"xlink:\") === -1 ? \"\" : ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n  for (const attr in attributes) {\n    renderAttribsHTML += \" \" + attr + '=\"' + attributes[attr] + '\"';\n  }\n  return '<svg xmlns=\"http://www.w3.org/2000/svg\"' + renderAttribsHTML + \">\" + body + \"</svg>\";\n}\n\nexport { iconToHTML };\n","const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision || 100;\n  if (typeof size === \"number\") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== \"string\") {\n    return size;\n  }\n  const oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  const newParts = [];\n  let code = oldParts.shift();\n  let isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      const num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join(\"\");\n    }\n    isNumber = !isNumber;\n  }\n}\n\nexport { calculateSize };\n","function encodeSVGforURL(svg) {\n  return svg.replace(/\"/g, \"'\").replace(/%/g, \"%25\").replace(/#/g, \"%23\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/\\s+/g, \" \");\n}\nfunction svgToData(svg) {\n  return \"data:image/svg+xml,\" + encodeSVGforURL(svg);\n}\nfunction svgToURL(svg) {\n  return 'url(\"' + svgToData(svg) + '\")';\n}\n\nexport { encodeSVGforURL, svgToData, svgToURL };\n","import { iconToHTML } from '../svg/html.mjs';\nimport { calculateSize } from '../svg/size.mjs';\nimport { svgToURL } from '../svg/url.mjs';\n\nfunction getCommonCSSRules(options) {\n  const result = {\n    display: \"inline-block\",\n    width: \"1em\",\n    height: \"1em\"\n  };\n  const varName = options.varName;\n  if (options.pseudoSelector) {\n    result[\"content\"] = \"''\";\n  }\n  switch (options.mode) {\n    case \"background\":\n      if (varName) {\n        result[\"background-image\"] = \"var(--\" + varName + \")\";\n      }\n      result[\"background-repeat\"] = \"no-repeat\";\n      result[\"background-size\"] = \"100% 100%\";\n      break;\n    case \"mask\":\n      result[\"background-color\"] = \"currentColor\";\n      if (varName) {\n        result[\"mask-image\"] = result[\"-webkit-mask-image\"] = \"var(--\" + varName + \")\";\n      }\n      result[\"mask-repeat\"] = result[\"-webkit-mask-repeat\"] = \"no-repeat\";\n      result[\"mask-size\"] = result[\"-webkit-mask-size\"] = \"100% 100%\";\n      break;\n  }\n  return result;\n}\nfunction generateItemCSSRules(icon, options) {\n  const result = {};\n  const varName = options.varName;\n  if (!options.forceSquare && icon.width !== icon.height) {\n    result[\"width\"] = calculateSize(\"1em\", icon.width / icon.height);\n  }\n  const svg = iconToHTML(\n    icon.body.replace(/currentColor/g, options.color || \"black\"),\n    {\n      viewBox: `${icon.left} ${icon.top} ${icon.width} ${icon.height}`,\n      width: icon.width.toString(),\n      height: icon.height.toString()\n    }\n  );\n  const url = svgToURL(svg);\n  if (varName) {\n    result[\"--\" + varName] = url;\n  } else {\n    switch (options.mode) {\n      case \"background\":\n        result[\"background-image\"] = url;\n        break;\n      case \"mask\":\n        result[\"mask-image\"] = result[\"-webkit-mask-image\"] = url;\n        break;\n    }\n  }\n  return result;\n}\nfunction generateItemContent(icon, options) {\n  const height = options.height;\n  const width = options.width ?? calculateSize(height, icon.width / icon.height);\n  const svg = iconToHTML(\n    icon.body.replace(/currentColor/g, options.color || \"black\"),\n    {\n      viewBox: `${icon.left} ${icon.top} ${icon.width} ${icon.height}`,\n      width: width.toString(),\n      height: height.toString()\n    }\n  );\n  return svgToURL(svg);\n}\n\nexport { generateItemCSSRules, generateItemContent, getCommonCSSRules };\n","import { getIconData } from '../icon-set/get-icon.mjs';\nimport { defaultIconProps } from '../icon/defaults.mjs';\nimport { getCommonCSSRules, generateItemCSSRules, generateItemContent } from './common.mjs';\nimport { formatCSS } from './format.mjs';\nimport '../icon/merge.mjs';\nimport '../icon/transformations.mjs';\nimport '../icon-set/tree.mjs';\nimport '../svg/html.mjs';\nimport '../svg/size.mjs';\nimport '../svg/url.mjs';\n\nconst commonSelector = \".icon--{prefix}\";\nconst iconSelector = \".icon--{prefix}--{name}\";\nconst contentSelector = \".icon--{prefix}--{name}::after\";\nconst defaultSelectors = {\n  commonSelector,\n  iconSelector,\n  overrideSelector: commonSelector + iconSelector\n};\nfunction getIconsCSSData(iconSet, names, options = {}) {\n  const css = [];\n  const errors = [];\n  const palette = options.color ? true : iconSet.info?.palette;\n  let mode = options.mode || typeof palette === \"boolean\" && (palette ? \"background\" : \"mask\");\n  if (!mode) {\n    for (let i = 0; i < names.length; i++) {\n      const icon = getIconData(iconSet, names[i]);\n      if (icon) {\n        mode = icon.body.includes(\"currentColor\") ? \"mask\" : \"background\";\n        break;\n      }\n    }\n    if (!mode) {\n      mode = \"mask\";\n      errors.push(\n        \"/* cannot detect icon mode: not set in options and icon set is missing info, rendering as \" + mode + \" */\"\n      );\n    }\n  }\n  let varName = options.varName;\n  if (varName === void 0 && mode === \"mask\") {\n    varName = \"svg\";\n  }\n  const newOptions = {\n    ...options,\n    // Override mode and varName\n    mode,\n    varName\n  };\n  const { commonSelector: commonSelector2, iconSelector: iconSelector2, overrideSelector } = newOptions.iconSelector ? newOptions : defaultSelectors;\n  const iconSelectorWithPrefix = iconSelector2.replace(\n    /{prefix}/g,\n    iconSet.prefix\n  );\n  const commonRules = {\n    ...options.rules,\n    ...getCommonCSSRules(newOptions)\n  };\n  const hasCommonRules = commonSelector2 && commonSelector2 !== iconSelector2;\n  const commonSelectors = /* @__PURE__ */ new Set();\n  if (hasCommonRules) {\n    css.push({\n      selector: commonSelector2.replace(/{prefix}/g, iconSet.prefix),\n      rules: commonRules\n    });\n  }\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const rules = generateItemCSSRules(\n      {\n        ...defaultIconProps,\n        ...iconData\n      },\n      newOptions\n    );\n    let requiresOverride = false;\n    if (hasCommonRules && overrideSelector) {\n      for (const key in rules) {\n        if (key in commonRules) {\n          requiresOverride = true;\n        }\n      }\n    }\n    const selector = (requiresOverride && overrideSelector ? overrideSelector.replace(/{prefix}/g, iconSet.prefix) : iconSelectorWithPrefix).replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules\n    });\n    if (!hasCommonRules) {\n      commonSelectors.add(selector);\n    }\n  }\n  const result = {\n    css,\n    errors\n  };\n  if (!hasCommonRules && commonSelectors.size) {\n    const selector = Array.from(commonSelectors).join(\n      newOptions.format === \"compressed\" ? \",\" : \", \"\n    );\n    result.common = {\n      selector,\n      rules: commonRules\n    };\n  }\n  return result;\n}\nfunction getIconsCSS(iconSet, names, options = {}) {\n  const { css, errors, common } = getIconsCSSData(iconSet, names, options);\n  if (common) {\n    if (css.length === 1 && css[0].selector === common.selector) {\n      css[0].rules = {\n        // Common first, override later\n        ...common.rules,\n        ...css[0].rules\n      };\n    } else {\n      css.unshift(common);\n    }\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\nfunction getIconsContentCSS(iconSet, names, options) {\n  const errors = [];\n  const css = [];\n  const iconSelectorWithPrefix = (options.iconSelector ?? contentSelector).replace(/{prefix}/g, iconSet.prefix);\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const content = generateItemContent(\n      { ...defaultIconProps, ...iconData },\n      options\n    );\n    const selector = iconSelectorWithPrefix.replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules: {\n        ...options.rules,\n        content\n      }\n    });\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\n\nexport { getIconsCSS, getIconsCSSData, getIconsContentCSS };\n","import { readFileSync } from 'fs';\nimport type { IconifyJSON } from '@iconify/types';\n\n/**\n * Callback for loading icon set\n */\ntype IconifyJSONLoaderCallback = () => IconifyJSON;\n\n/**\n * Options for icon set loaders\n */\nexport interface IconifyPluginLoaderOptions {\n  // Custom icon sets\n  // Value can be loaded icon set or callback that loads icon set\n  iconSets?: Record<string, IconifyJSON | string | IconifyJSONLoaderCallback>;\n  iconLocalSets?: Record<string, string>;\n}\n\n/**\n * Locate icon set\n */\ninterface LocatedIconSet {\n  main: string;\n  info?: string;\n}\nexport function locateIconSet(prefix: string): LocatedIconSet | undefined {\n  try {\n    const main = require.resolve(`@iconify-json/${prefix}/icons.json`);\n    const info = require.resolve(`@iconify-json/${prefix}/info.json`);\n    return {\n      main,\n      info,\n    };\n  } catch { }\n  try {\n    const main = require.resolve(`@iconify/json/json/${prefix}.json`);\n    return {\n      main,\n    };\n  } catch { }\n}\n\n/**\n * Cache for loaded icon sets\n *\n * Tailwind CSS can send multiple separate requests to plugin, this will\n * prevent same data from being loaded multiple times.\n *\n * Key is filename, not prefix!\n */\nconst cache = Object.create(null) as Record<string, IconifyJSON>;\n\n/**\n * Load icon set\n */\nexport function loadIconSet(prefix: string, options: IconifyPluginLoaderOptions): IconifyJSON | undefined {\n  let filename: LocatedIconSet;\n\n  // Check for custom icon set\n  const customIconSet = options.iconSets?.[prefix];\n  if (customIconSet) {\n    switch (typeof customIconSet) {\n      case 'function': {\n        // Callback. Store result in options to avoid loading it again\n        const result = customIconSet();\n        options.iconSets[prefix] = result;\n        return result;\n      }\n\n      case 'string': {\n        // Filename to load it from\n        filename = {\n          main: customIconSet,\n        };\n        break;\n      }\n\n      default:\n        return customIconSet;\n    }\n  } else {\n    // Find icon set\n    filename = locateIconSet(prefix);\n  }\n\n  if (!filename) {\n    return;\n  }\n\n  const main = typeof filename === 'string' ? filename : filename.main;\n\n  // Check for cache\n  if (cache[main]) {\n    return cache[main];\n  }\n\n  // Attempt to load it\n  try {\n    const result = JSON.parse(readFileSync(main, 'utf8'));\n    if (!result.info && typeof filename === 'object' && filename.info) {\n      // Load info from a separate file\n      result.info = JSON.parse(readFileSync(filename.info, 'utf8'));\n    }\n    cache[main] = result;\n    return result;\n  } catch { }\n}\n","const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nconst stringToIcon = (value, validate, allowSimpleName, provider = \"\") => {\n  const colonSeparated = value.split(\":\");\n  if (value.slice(0, 1) === \"@\") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    const name2 = colonSeparated.pop();\n    const prefix = colonSeparated.pop();\n    const result = {\n      // Allow provider without '@': \"provider:prefix:name\"\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix,\n      name: name2\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  const name = colonSeparated[0];\n  const dashSeparated = name.split(\"-\");\n  if (dashSeparated.length > 1) {\n    const result = {\n      provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join(\"-\")\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  if (allowSimpleName && provider === \"\") {\n    const result = {\n      provider,\n      prefix: \"\",\n      name\n    };\n    return validate && !validateIconName(result, allowSimpleName) ? null : result;\n  }\n  return null;\n};\nconst validateIconName = (icon, allowSimpleName) => {\n  if (!icon) {\n    return false;\n  }\n  return !!((icon.provider === \"\" || icon.provider.match(matchIconName)) && (allowSimpleName && icon.prefix === \"\" || icon.prefix.match(matchIconName)) && icon.name.match(matchIconName));\n};\n\nexport { matchIconName, stringToIcon, validateIconName };\n","import { matchIconName } from '@iconify/utils/lib/icon/name';\n\n/**\n * Get icon names from list\n */\nexport function getIconNames(icons: string[] | string): Record<string, Set<string>> | undefined {\n  const prefixes = Object.create(null) as Record<string, Set<string>>;\n\n  // Add entry\n  const add = (prefix: string, name: string) => {\n    if (\n      typeof prefix === 'string' &&\n      prefix.match(matchIconName) &&\n      typeof name === 'string' &&\n      name.match(matchIconName)\n    ) {\n      (prefixes[prefix] || (prefixes[prefix] = new Set())).add(name);\n    }\n  };\n\n  // Comma or space separated string\n  let iconNames: string[] | undefined;\n  if (typeof icons === 'string') {\n    iconNames = icons.split(/[\\s,.]/);\n  } else if (icons instanceof Array) {\n    iconNames = [];\n    // Split each array entry\n    icons.forEach(item => {\n      item.split(/[\\s,.]/).forEach(name => iconNames.push(name));\n    });\n  } else {\n    return;\n  }\n\n  // Parse array\n  if (iconNames?.length) {\n    iconNames.forEach(icon => {\n      if (!icon.trim()) {\n        return;\n      }\n\n      // Attempt prefix:name split\n      const nameParts = icon.split(':');\n      if (nameParts.length === 2) {\n        add(nameParts[0], nameParts[1]);\n        return;\n      }\n\n      // Attempt icon class: .icon--{prefix}--{name}\n      // with or without dot\n      const classParts = icon.split('--');\n      if (classParts[0].match(/^\\.?icon$/)) {\n        if (classParts.length === 3) {\n          add(classParts[1], classParts[2]);\n          return;\n        }\n        if (classParts.length === 2) {\n          // Partial match\n          return;\n        }\n      }\n\n      // Throw error\n      throw new Error(`Cannot resolve icon: \"${icon}\"`);\n    });\n  } else {\n    return;\n  }\n\n  return prefixes;\n}\n","import { getIconsCSSData } from '@iconify/utils/lib/css/icons';\nimport { loadIconSet } from './loader';\nimport { getIconNames } from './names';\nimport type { CleanIconifyPluginOptions } from './options';\n\n/**\n * Get CSS rules for icons list\n */\nexport function getCSSRulesForIcons(\n  icons: string[] | string,\n  options: CleanIconifyPluginOptions = {},\n): Record<string, Record<string, string>> {\n  const rules = Object.create(null) as Record<string, Record<string, string>>;\n\n  // Get all icons\n  const prefixes = getIconNames(icons);\n\n  // Parse all icon sets\n  for (const prefix in prefixes) {\n    const iconSet = loadIconSet(prefix, options);\n    if (!iconSet) {\n      throw new Error(`Cannot load icon set for \"${prefix}\". Install \"@iconify-json/${prefix}\" as dev dependency?`);\n    }\n    const generated = getIconsCSSData(iconSet, Array.from(prefixes[prefix]), options);\n\n    const result = generated.common ? [generated.common, ...generated.css] : generated.css;\n    result.forEach(item => {\n      const selector = item.selector instanceof Array ? item.selector.join(', ') : item.selector;\n      rules[selector] = item.rules;\n    });\n  }\n\n  return rules;\n}\n","import { getIconsCSSData } from '@iconify/utils/lib/css/icons';\nimport { matchIconName } from '@iconify/utils/lib/icon/name';\nimport { loadIconSet } from './loader';\nimport type { DynamicIconifyPluginOptions } from './options';\n\n/**\n * Get dynamic CSS rules\n */\nexport function getDynamicCSSRules(\n  icon: string,\n  { scale = 1, ...options }: DynamicIconifyPluginOptions = {},\n): Record<string, string> {\n  const nameParts = icon.split(/--|\\:/);\n  if (nameParts.length !== 2) {\n    throw new Error(`Invalid icon name: \"${icon}\"`);\n  }\n\n  const [prefix, name] = nameParts;\n  if (!(prefix.match(matchIconName) && name.match(matchIconName))) {\n    throw new Error(`Invalid icon name: \"${icon}\"`);\n  }\n\n  const iconSet = loadIconSet(prefix, options);\n  if (!iconSet) {\n    throw new Error(`Cannot load icon set for \"${prefix}\". Install \"@iconify-json/${prefix}\" as dev dependency?`);\n  }\n\n  const generated = getIconsCSSData(iconSet, [name], {\n    iconSelector: '.icon',\n  });\n  if (generated.css.length !== 1) {\n    throw new Error(`Cannot find \"${icon}\". Bad icon name?`);\n  }\n\n  if (scale) {\n    generated.common.rules.height = `${scale}em`;\n    generated.common.rules.width = `${scale}em`;\n  } else {\n    delete generated.common.rules.height;\n    delete generated.common.rules.width;\n  }\n\n  return {\n    // Common rules\n    ...(options.overrideOnly || !generated.common?.rules ? {} : generated.common.rules),\n\n    // Icon rules\n    ...generated.css[0].rules,\n  };\n}\n"]}